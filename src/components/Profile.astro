<div class="flex flex-row gap-4 md:gap-8 profile-container">
    <div class="profile-pfp profile-pfp-placeholder" id="profile-avatar"></div>
    <div class="flex flex-col profile-text">
        <span class="text-xl md:text-2xl font-bold" id="profile-name">amemoia</span>
        <div class="text-xs md:text-sm" id="status-container">
            <span class="status-indicator" id="status-indicator" data-status="offline"></span>
            <span id="status-text">offline</span>
        </div>
    </div>
</div>

<script>
    // client side lanyard api fetch
    const UID = "254204775497859073";
    const avatarElement = document.getElementById('profile-avatar');
    const nameElement = document.getElementById('profile-name');
    const statusIndicator = document.getElementById('status-indicator');
    const statusText = document.getElementById('status-text');

    async function fetchLanyardData() {
        try {
            const response = await fetch(`https://api.lanyard.rest/v1/users/${UID}`);
            if (response.ok) {
                const toJson = await response.json();
                const lanyard = toJson.data;
                if (lanyard.discord_user) {
                    const { id, avatar, global_name } = lanyard.discord_user;
                    const avatarUrl = `https://cdn.discordapp.com/avatars/${id}/${avatar}.png?size=256`;
                    
                    if (avatarElement) {
                        avatarElement.style.backgroundImage = `url(${avatarUrl})`;
                        avatarElement.classList.remove('profile-pfp-placeholder');
                    }
                    
                    if (nameElement) {
                        nameElement.textContent = global_name || 'amemoia';
                    }
                    
                    if (statusIndicator && statusText) {
                        statusIndicator.setAttribute('data-status', lanyard.discord_status);
                        statusText.textContent = lanyard.discord_status;
                    }
                }
            } else {
                console.error('Lanyard API error:', response.status, response.statusText);
            }
        } catch (error) {
            console.error('Failed to fetch Lanyard data:', error);
        }
    }

    fetchLanyardData();
</script>

<style>
    :root {
        --pfp-size: 64px;
    }
    @media (min-width: theme('screens.md')) {
        :root {
            --pfp-size: 96px;
        }
    }

    .profile-container {
        width: 100%;
        padding-right: 1em;
    }

    .profile-pfp {
        width: var(--pfp-size);
        height: var(--pfp-size);
        border-radius: var(--radius-default);
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }
    
    .profile-pfp-placeholder {
        background-color: var(--bg-secondary);
    }
    
    .profile-text {
        justify-content: center;
    }

    .status-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 4px;
    }
    .status-indicator[data-status="online"] {
        background-color: var(--deadlock-green);
        box-shadow: 0 0 8px rgba(106, 231, 154, 0.6);
    }
    .status-indicator[data-status="idle"] {
        background-color: var(--deadlock-orange);
        box-shadow: 0 0 8px rgba(236, 152, 26, 0.6);
    }
    .status-indicator[data-status="dnd"] {
        background-color: var(--deadlock-red);
        box-shadow: 0 0 8px rgba(255, 107, 107, 0.6);
    }
    .status-indicator[data-status="offline"] {
        background-color: #777777;
        box-shadow: 0 0 8px rgba(119, 119, 119, 0.4);
    }
    
    @media (prefers-color-scheme: light) {
        .status-indicator[data-status="online"] {
            box-shadow: 0 0 6px rgba(22, 163, 74, 0.5);
        }
        .status-indicator[data-status="idle"] {
            box-shadow: 0 0 6px rgba(236, 152, 26, 0.5);
        }
        .status-indicator[data-status="dnd"] {
            box-shadow: 0 0 6px rgba(220, 53, 69, 0.5);
        }
        .status-indicator[data-status="offline"] {
            box-shadow: 0 0 4px rgba(119, 119, 119, 0.3);
        }
    }
</style>
